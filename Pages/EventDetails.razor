@page "/events/details/{EventName}"
@using EventEaseApp.Models
@using System.Text.Encodings.Web
@inject AttendanceService attendanceService
@inject EventService eventService

<div class="container mt-5">
    @if (eventModel == null)
    {
        <div class="alert alert-warning">
            <p>Event not found.</p>
            <NavLink class="btn btn-outline-secondary" href="/events">← Back to Events</NavLink>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
        <div class="card-body">
            <h3 class="card-title text-primary">@eventModel.EventName</h3>
            <p class="card-text">
                <strong>Date:</strong> @eventModel.EventDate.ToShortDateString()<br />
                <strong>Location:</strong> @eventModel.Location
            </p>

            <NavLink class="btn btn-success" href="@($"/events/register/{EventName}")">Register for this event</NavLink>
            <NavLink class="btn btn-outline-secondary ms-2" href="/events">← Back to Events</NavLink>

            <hr class="my-4" />

            <button class="btn btn-info mb-2"
                    data-bs-toggle="collapse"
                    data-bs-target="#attendeeList"
                    aria-controls="attendeeList"
                    aria-expanded="false">
                Show Registered Attendees (@attendeeCount)
            </button>


            <div class="collapse" id="attendeeList">
                @if (attendees.Any())
                {
                    <ul class="list-group">
                        @foreach (var email in attendees)
                        {
                            <li class="list-group-item">@HtmlEncoder.Default.Encode(email)</li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">No attendees registered yet.</p>
                }
            </div>
        </div>
    </div>
    }
</div>

@code {
    [Parameter]
    public string EventName { get; set; }

    private EventModel eventModel;
    private int attendeeCount = 0;
    private List<string> attendees = new List<string>();

    protected override async Task OnParametersSetAsync()
    {
        await Task.Yield(); // lightweight async placeholder
        var foundEvent = eventService.GetEvents().FirstOrDefault(e => e.EventName == Uri.UnescapeDataString(EventName));
        if (foundEvent != null)
        {
            eventModel = foundEvent;
            attendees = attendanceService.GetAttendees(eventModel.EventName);
            attendeeCount = attendees.Count;
        }
        else
        {
            eventModel = null;
            attendees = new List<string>();
            attendeeCount = 0;
        }
    }
}
