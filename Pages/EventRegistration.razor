@page "/events/register/{EventName}"
@using System.ComponentModel.DataAnnotations
@inject UserState userState
@inject AttendanceService attendanceService
@inject IJSRuntime JS

<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-body">
            <h3 class="card-title text-primary">Register for @EventName</h3>
            <EditForm Model="@registrationModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="registrationModel.Name" />
                    <ValidationMessage For="@(() => registrationModel.Name)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="registrationModel.Email" />
                    <ValidationMessage For="@(() => registrationModel.Email)" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Submit Registration</button>
            </EditForm>

            <div class="mt-3">
                <NavLink class="btn btn-outline-secondary" href="/events">‚Üê Back to Events</NavLink>
            </div>
        </div>
    </div>
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast align-items-center text-bg-success border-0" role="alert" id="successToast">
            <div class="d-flex">
                <div class="toast-body">
                    Successfully registered for @EventName!
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string EventName { get; set; }

    private RegistrationModel registrationModel = new();

    private async Task HandleValidSubmit()
    {
        userState.Name = registrationModel.Name;
        userState.Email = registrationModel.Email;
        userState.RegisteredEvents ??= new List<string>();
        userState.RegisteredEvents.Add(EventName);
        attendanceService.Register(EventName, registrationModel.Email);
        await JS.InvokeVoidAsync("showSuccessToast");

        registrationModel = new RegistrationModel();
        StateHasChanged();
    }

    public class RegistrationModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }
    }
}
